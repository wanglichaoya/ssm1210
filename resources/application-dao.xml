<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:bean="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
">

    <!--context:annotation-config 告诉 Spring使用注解的形式来进行配置-->
    <context:annotation-config/>
    <!--
    配置数据源，事务管理，SqlSessionFactory,mapper扫描器
    jdbc 数据源
    org.springframework.jdbc.datasource.DataSourceTransactionManager
    -->
    <!-- 加载db.properties文件中的内容，db.properties文件中的key命名要有一定的特殊规则 -->
    <!--<context:property-placeholder location="classpath:db.properties"/>-->
    <!--加载配置文件-->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:db.properties"/>
    </bean>

    <bean id="dataSource" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--配置SqlSessionFactory 对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据库连接池-->
        <property name="dataSource" ref="dataSource"></property>
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!--配置扫描Mapper需要的.xml文件-->
        <property name="mapperLocations" value="classpath:com/mapper/*.xml"></property>
    </bean>

    <!--配置需要扫描Dao接口的包,动态实现dao接口，注入到 spring 容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--注入SqlSessionFaction-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <!--给出需要扫描的Dao接口-->
        <property name="basePackage" value="com.dao"></property>
    </bean>

    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--注入数据库连接池-->
        <property name="dataSource" ref="dataSource"></property>

    </bean>
    <!--配置基于注解的声明式事务-->
    <!--<tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>-->

    <bean id="sleep" class="com.controller.other.Sleep"></bean>

    <bean id="logAspectController" class="com.controller.testAspectController.LogManagerController"></bean>

    <!--基于 tx,aop  的 事务-->
    <!--配置 事务通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="load*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="add*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="edit*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="del*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="update*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="query*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="get*" propagation="REQUIRED" rollback-for="com.exception.MyException"/>
            <!-- <tx:method name="*" read-only="false"></tx:method>-->
        </tx:attributes>
    </tx:advice>


    <!--  springAop 配置-->
    <!--  <aop:config>
          &lt;!&ndash;切入点&ndash;&gt;
          &lt;!&ndash;<aop:pointcut id="pointcut1" expression="execution(* com.*.*.*(..))"></aop:pointcut>&ndash;&gt;
          <aop:pointcut id="pointcut1" expression="execution(* com.controller.testAspectController.*.*(..))"></aop:pointcut>
          <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut1"></aop:advisor>
          <aop:advisor advice-ref="logAspectController" pointcut-ref="pointcut1"></aop:advisor>
      </aop:config>-->


    <!-- <bean id="logInterceptor" class="com.intercepter.LogInterceptor"></bean>

     <aop:config>
         <aop:aspect id="logAspect" ref="logInterceptor">
             <aop:pointcut id="pointcut1" expression="execution(* com.*.*.*(..))"></aop:pointcut>
             <aop:around method="around" pointcut-ref="pointcut1"></aop:around>
         </aop:aspect>
     </aop:config>-->

    <!--基于注解的方式 Aop 切面编程  开始-->
    <context:component-scan base-package="com.*"></context:component-scan>
    <!--配置基于注解的Aspect 切面编程-->
    <aop:config proxy-target-class="true"></aop:config>
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
    <!--基于注解的方式 Aop 切面编程  结束-->


</beans>